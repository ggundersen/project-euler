"""----------------------------------------------------------------------------
Project Euler
Gregory Gundersen
2012-12-13

Problem:
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?
----------------------------------------------------------------------------"""

import collections
import operator
import lib.gmath as g


def get_number_of_divisors(max_divisor):

    prime_factors = []
    number_of_each_divisor = []
    total = 0
    gen = g.gen_triangle_numbers()
    #primeFactors, numOfEachDiv, total = [], [], 0

    while total < max_divisor:
        
        ''' get prime factors of next triangle number '''
        tri_num = gen.next()
        prime_factors = g.get_prime_factors(tri_num)

        ''' If n = a^c * b^d where a and b are n's prime divisors,
        repeated c and d times respectively,
        then n's number of divisors is (c + 1) * (d + 1) '''

        counter = collections.Counter(prime_factors)
        number_of_each_divisor = counter.values()
        number_of_each_divisor = [i+1 for i in number_of_each_divisor]
        total = reduce(operator.mul, number_of_each_divisor, 1)

    return tri_num


def main():

    return get_number_of_divisors(500)
