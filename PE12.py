'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
'''

import collections, gmath, time, operator
s = time.time()

def genTriNum():
    triNum, intNum = 1, 1
    yield 1
    while True:
        intNum += 1
        triNum += intNum
        yield triNum

def getNumDiv(maxDiv):
    primeFactors, numOfEachDiv, total = [], [], 0
    triNumGen = genTriNum()

    while total < maxDiv:
        
        ''' get prime factors of next triangle number '''
        triNum = triNumGen.next()
        primeFactors = gmath.getPrimeFactors(triNum)

        ''' If n = a^c * b^d where a and b are n's prime divisors,
        repeated c and d times respectively,
        then n's number of divisors is (c + 1) * (d + 1) '''

        counter = collections.Counter(primeFactors)
        numOfEachDiv = counter.values()
        numOfEachDiv = [i+1 for i in numOfEachDiv]
        total = reduce(operator.mul, numOfEachDiv, 1)

    print 'Triangle number: ' + str(triNum)
    print 'Prime factors: ' + str(primeFactors)
    print 'Number of divisors: ' +str(total)

getNumDiv(500)
print 'Time: ' + str(time.time() - s)
